class Protein:
    """
    Class that represents a protein.

    Properties:
        mass: the total mass of the protein

        peptide: the mass of each amino acid in the protein.

        aa: The single letter amino acid representation of the protein.
            (This isn't updated as of right now so don't expect this to be accurate).
    """
    def __init__(self, peptide: list[int], aa_string: str):
        self.mass = sum(peptide)
        self.peptide = peptide
        self.aa = aa_string
    
class Scored_Protein:
    """
    Holds info relevant to keeping track of the linear score of a protein.

    Properties:
        Protein: A protein object

        spectrum: The mass spectrum that protein will be scored against

        used_idx: a list of indicies that are associated with masses in mass spectrum that have already been accounted
        for in the score. Used for fast updating of score when new amino acid is added.

        score: the linear score of a protein.

    """
    def __init__(self, peptide: list[int], aa_string: str, spectrum: list[int]):
        self.protein = Protein(peptide, aa_string)
        self.spectrum = spectrum # The spectrum the protein is scored against.
        self.used_idx = set()
        self.score = 0
        self.LinearScore()

    def LinearScore(self):
        """
        LinearScore: Calculates the score between the linear spectrum of a peptide and a given spectrum.

        Input:
            peptide: a peptide represented as a list of peptide masses.

        Output:
            spectrum: the given mass spectrum.
        """
        peptide_spectrum = self.LinearSpectrum()
        for pep_mass in peptide_spectrum:
            for ind, spec_mass in enumerate(self.spectrum):
                if (pep_mass == spec_mass) and (ind not in self.used_idx):
                    self.used_idx.add(ind)
                    self.score += 1
                    break

    def GeneratePrefixMass(self) -> list[int]:
        """
        Generate the prefix masses of a protein.
        """
        prefix_mass = [0 for i in range(len(self.protein.peptide)+1)]
        for i in range(1, len(prefix_mass)):
            prefix_mass[i] = prefix_mass[i-1] + self.protein.peptide[i-1]
        return prefix_mass

    def LinearSpectrum(self) -> list[int]:
        """
        LinearSpectrum: Generates the theoretical mass spectrum generated by a peptide.

        Output: 
            lin_spectrum: The linear spectrum of Peptide.
        """
        prefix_mass = self.GeneratePrefixMass()
        lin_spectrum = [0]
        for i in range(len(prefix_mass)-1):
            for j in range(i+1, len(prefix_mass)):
                lin_spectrum.append(prefix_mass[j]-prefix_mass[i])
        return lin_spectrum
    
    def AddAminoAcid(self, amino_acid: int):
        """
        Add an amino acid to the protein.

        Input:
            amino_acid: the amino acid to add.
        """
        self.protein.mass += amino_acid
        self.protein.peptide.append(amino_acid)
        
        prefix_mass = self.GeneratePrefixMass()
        new_spectrum_masses = []
        for i in range(len(prefix_mass)-1):
            new_spectrum_masses.append(self.protein.mass - prefix_mass[i])
        self.UpdateLinearScore(new_spectrum_masses)

    def UpdateLinearScore(self, new_masses: list[int]):
        """
        Updates the linear score of the protein based on the new masses added. This way we don't have to recount
        the contribution of old masses.

        Input:
            new_masses: the new masses added to the theoretical linear spectrum of protein due to adding an amino acid.
        """
        for m in new_masses:
            for idx, spec_mass in enumerate(self.spectrum):
                if (m == spec_mass) and (idx not in self.used_idx):
                    self.used_idx.add(idx)
                    self.score += 1
                    break

    def copy(self):
        """
        Custom copy method. 

        All properties of scored_protein are copied in a "deep copy" like fashion except for the property "spectrum".
        """
        cls = self.__class__
        new_sp = cls.__new__(cls)
        
        setattr(new_sp, "protein", Protein(self.protein.peptide.copy(),self.protein.aa))
        setattr(new_sp, "used_idx", self.used_idx.copy())
        setattr(new_sp, "score", self.score)
        setattr(new_sp, "spectrum", self.spectrum)
        return new_sp