from TheoreticalSpectrum import *

def main():
    temp = list(range(11, 20, 1))
    temp = set(temp)
    # for ind, ele in enumerate(temp):
    #     temp.remove(ele)
    print(temp)

def CyclopeptideSequencing(spectrum: list[int]) -> list[str]:
    candidate_peptides = set("")
    final_peptides = []
    while not candidate_peptides:
        candidate_peptides = ExpandPeptide(candidate_peptides)
        remove_list = []
        for peptide in candidate_peptides:
            if CalculatePeptideMass(peptide) == ParentMass(spectrum):
                if (CycloSpectrum(peptide) == spectrum) and (peptide not in final_peptides):
                    final_peptides.append(peptide)
                remove_list.append(peptide)
            elif CheckSpectrumCompatibility(peptide, spectrum):
                remove_list.append(peptide)
        
        for peptide in remove_list:
            candidate_peptides.remove(peptide)
            
    return final_peptides

#     pass

def ExpandPeptide(peptides: set[str]) -> set[str]:
    """
    ExpandPeptide: Creates a list of all possible single letter peptide extensions of the all the peptide chains in 'peptides'.

    Input:
        peptides: A list of peptide chains. These will be extended by each of the 20 amino acids.

    Output:
        new_peptides: The new peptides.
    """
    _, AminoAcids = GenerateAAInfo()
    new_peptides=[]
    for peptide in peptides:
        for aa in AminoAcids:
            new_peptides.append(peptide+aa)
    return new_peptides

def CalculatePeptideMass(peptide: str) -> int:
    """
    CalculatePeptideMass. calculates the mass of a peptide string. Assumes peptides are represented by single letters.

    Input:
        peptide: A peptide represented as a string of amino acids.

    Output:
        mass: the mass of peptide.
    """
    mass = 0
    mass_dict, _ = GenerateAAInfo()
    for aa in peptide:
        mass += mass_dict[aa.upper()]
    return mass

def ParentMass(spectrum: list[int]) -> int:
    """
    ParentMass: Returns the parent mass of a mass spectrum.

    Input:
        spectrum: mass spectrum data as a list of ints.

    Output:
        parent_mass: The parent mass of spectrum.
    """
    parent_mass = 0
    for mass in spectrum:
        if mass > parent_mass:
            parent_mass = mass
    return parent_mass

def CheckSpectrumCompatibility(peptide: str, spectrum: list[int]) -> bool:
    """
    CheckSpectrumCompatibility: Checks if the spectrum generated by peptide is compatible with a given spectrum.

    Input:
        peptide: The peptide as a string of single letter amino acids.

        spectrum: The mass spectrum being used to determine whether peptide is compatible or not.
    
    Output:
        bool: True if peptide is compatible. False otherwise.
    """
    peptide_spectrum = CycloSpectrum(peptide)

    used_indicies = [] # indexes of masses in spectrum that have already been matched with a mass in peptide_spectrum.
    for pep_mass in peptide_spectrum:
        found_match = False
        for ind, spec_mass in enumerate(spectrum):
            if (pep_mass == spec_mass) and (ind not in used_indicies):
                used_indicies.append(ind)
                found_match = True
                break
        if not found_match: # If there is a unmatched mass between the theoretical spectrum and given spectrum.
            return False

    return True

if __name__ == "__main__":
    main()